resources:
  containers:
    - container: rocky8-builder
      image: levelsbeyond-docker.jfrog.io/rocky8-java-8-and-11-builder:3.0.0
      endpoint: LB_Docker_Images
      env:
        JAVA8_HOME: /usr/lib/jvm/java-1.8.0
        JAVA11_HOME: /usr/lib/jvm/java-11
        JAVA_OPTS: "-Xmx5g -Xms5g"

variables:
  performNpmAuthenticate: false
  dynamicVersion: true
  # system.debug: true

pool:
  vmImage: 'ubuntu-latest'

trigger:
  branches:
    include:
    - '*'

stages:
  - stage: Publish
    jobs:
      - job: NpmSteps
        container: rocky8-builder
        steps:
          - task: DownloadSecureFile@1
            name: DownloadNpmrcFile
            inputs:
              secureFile: '.npmrc'
          - task: DownloadSecureFile@1
            name: DownloadSettingsFile
            inputs:
              secureFile: 'settings.xml'
          - task: Bash@3
            name: GeneralBash
            displayName: 'Configure npm'
            inputs:
              targetType: 'inline'
              script: |
                # output npm info
                echo "============= start of debug info ============="
                echo "pwd ==> $(pwd)"
                echo "NPM_TOKEN ==> ${NPM_TOKEN}"
                echo "Agent.TempDirectory ==> $(Agent.TempDirectory)"
                ls -lah $(Agent.TempDirectory)
                echo "System.DefaultWorkingDirectory ==> $(System.DefaultWorkingDirectory)"
                ls -lah ${SYSTEM_DEFAULTWORKINGDIRECTORY}
                echo "get npm and node info"
                npm --version
                node -v
                echo "npm config file: $(DownloadNpmrcFile.secureFilePath)"
                echo "============= start of npm config file contents ============="
                cat $(DownloadNpmrcFile.secureFilePath)
                echo "============== end of npm config file contents =============="
                echo "============= start of settings file contents ============="
                cp $(DownloadSettingsFile.secureFilePath) ${SYSTEM_DEFAULTWORKINGDIRECTORY}/tmp.tmp
                cat ${SYSTEM_DEFAULTWORKINGDIRECTORY}/tmp.tmp
                echo "============== end of settings file contents =============="
                echo "============= start grep for username in settings file contents ============="
                grep username ${SYSTEM_DEFAULTWORKINGDIRECTORY}/tmp.tmp | awk -F ">" '{print $2}' | awk -F "<" '{print $1}'
                rm -f ${SYSTEM_DEFAULTWORKINGDIRECTORY}/tmp.tmp
                echo "============== end of grep for username in settings file contents =============="
                whoamistr=$(npm whoami --userconfig $(DownloadNpmrcFile.secureFilePath))
                echo "whoami specifying npm userconfig file return: $?"
                echo "============= start of whoami cmd output ============="
                firstPartWhoami=${whoamistr::-2}
                secondPartWhoami=${whoamistr: -2}
                echo "whoamistr: ${whoamistr}"
                echo "firstPartWhoami: ${firstPartWhoami}"
                echo "secondPartWhoami: ${secondPartWhoami}"
                echo "firstPartWhoami-secondPartWhoami: ${firstPartWhoami}-${secondPartWhoami}"
                echo "============== end of whoami cmd output =============="
                cat > 'mvnsettings.xml' << 'END'
                <settings xmlns="http://maven.apache.org/SETTINGS/1.0.0"
                        xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
                        xsi:schemaLocation="http://maven.apache.org/SETTINGS/1.0.0
                                    http://maven.apache.org/xsd/settings-1.0.0.xsd">
                    <localRepository/>
                    <interactiveMode/>
                    <usePluginRegistry/>
                    <offline/>
                    <servers>
                        <server>
                            <id>LB-repository</id>
                            <username>${ARTIFACTORY_USER}</username>
                            <password>${ARTIFACTORY_PASSWORD}</password>
                        </server>
                        <server>
                            <id>LB-Snapshots</id>
                            <username>${ARTIFACTORY_USER}</username>
                            <password>${ARTIFACTORY_PASSWORD}</password>
                        </server>
                        <server>
                            <id>LB-Releases</id>
                            <username>${ARTIFACTORY_USER}</username>
                            <password>${ARTIFACTORY_PASSWORD}</password>
                        </server>
                        <server>
                            <id>levelsbeyond-docker.jfrog.io</id>
                            <username>${ARTIFACTORY_USER}</username>
                            <password>${ARTIFACTORY_PASSWORD}</password>
                        </server>
                    </servers>
                    <mirrors>
                        <mirror>
                            <id>LB-repository</id>
                            <name>LB repository</name>
                            <url>https://levelsbeyond.jfrog.io/levelsbeyond/repo</url>
                            <mirrorOf>LB-repository,LB-Snapshots,LB-Releases</mirrorOf>
                        </mirror>
                    </mirrors>
                    <proxies/>
                    <pluginGroups/>
                    <profiles/>
                    <activeProfiles/>
                </settings>
                END
                echo "======== begin listing of working dir ========"
                ls -la '${{variables.workingDir}}'
                echo "========= end listing of working dir ========="
                echo "======== begin output of mvn settings file ========"
                cat mvnsettings.xml
                echo "========= end output of mvn settings file ========="
                echo "============== end of debug info =============="
          - task: npmAuthenticate@0
            condition: ${{variables.performNpmAuthenticate}}
            inputs:
              workingFile: DownloadNpmrcFile.secureFilePath)
              customEndpoint: "Artifactory NPM"
          - task: Bash@3
            name: NpmPublish
            displayName: 'npm_publish'
            inputs:
              targetType: 'inline'
              script: |
                echo "============= start of debug info ============="
                echo "System.DefaultWorkingDirectory ==> $(System.DefaultWorkingDirectory)"
                ls -lah ${SYSTEM_DEFAULTWORKINGDIRECTORY}
                echo "output the npm config info"
                npm config list -l
                echo "run generate.sh script"
                ./generate.sh ${{variables.dynamicVersion}} $(DownloadNpmrcFile.secureFilePath)
                echo "============= end of debug info ============="
          - task: Bash@3
            name: NpmWhoAmI
            displayName: 'npm_whoami'
            inputs:
              targetType: 'inline'
              script: |
                echo "============= start of debug info ============="
                echo "System.DefaultWorkingDirectory ==> $(System.DefaultWorkingDirectory)"
                ls -lah ${SYSTEM_DEFAULTWORKINGDIRECTORY}
                echo "npm config file: $(System.DefaultWorkingDirectory)/.npmrc"
                echo "============= start of npm config file contents ============="
                cat $(System.DefaultWorkingDirectory)/.npmrc
                echo "============== end of npm config file contents =============="
                whoamistr=$(npm whoami --userconfig $(System.DefaultWorkingDirectory)/.npmrc)
                echo "whoami specifying npm userconfig file return: $?"
                echo "============= start of whoami cmd output ============="
                firstPartWhoami=${whoamistr::-2}
                secondPartWhoami=${whoamistr: -2}
                echo "whoamistr: ${whoamistr}"
                echo "firstPartWhoami: ${firstPartWhoami}"
                echo "secondPartWhoami: ${secondPartWhoami}"
                echo "firstPartWhoami-secondPartWhoami: ${firstPartWhoami}-${secondPartWhoami}"
                echo "============== end of whoami cmd output =============="
                whoamistr=$(npm whoami)
                echo "whoami without specifying npm userconfig file return: $?"
                echo "============= start of whoami cmd output ============="
                firstPartWhoami=${whoamistr::-2}
                secondPartWhoami=${whoamistr: -2}
                echo "whoamistr: ${whoamistr}"
                echo "firstPartWhoami: ${firstPartWhoami}"
                echo "secondPartWhoami: ${secondPartWhoami}"
                echo "firstPartWhoami-secondPartWhoami: ${firstPartWhoami}-${secondPartWhoami}"
                echo "============== end of whoami cmd output =============="
                echo "============== end of debug info =============="
